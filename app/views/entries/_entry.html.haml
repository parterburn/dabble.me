.center
  - if entry.exactly_past_years(current_user)
    - year_back = Time.now.in_time_zone(current_user.send_timezone).year - entry.date.year
    .label.label-past-years #{pluralize(year_back,"year").upcase} AGO
  .s-entry-date
    -if entry.inspiration.present?
      .float-left.s-edit-entry{rel: "popover", title: "#{entry.inspiration.inspired_by}", data: { content: "#{entry.inspiration.body.html_safe}" } }
        %i.fa.fa-lightbulb-o
        - if current_user.can_ai? && !(entry.ai_waiting_for_ai_response || params[:ai] == "generating")
          %div{style: "width: 43px;"}
    -else
      .float-left.s-edit-entry
        %div{style: "width: 20px;"}
        - if current_user.can_ai? && !(entry.ai_waiting_for_ai_response || params[:ai] == "generating")
          %div{style: "width: 43px;"}
    .float-right.s-edit-entry
      - if current_user.can_ai? && !entry.body.include?("ðŸ¤– DabbleMeGPT:") && !(entry.ai_waiting_for_ai_response || params[:ai] == "generating")
        = link_to process_as_ai_path(entry), method: :post, style: "margin-right: 15px;", data: { confirm: "DabbleMeGPT employs AI preview technology that may produce unusual or incorrect responses. Your entry is not retained permanently or utilized for training any AI models." } do
          %span{rel: "tooltip", title: "Process with DabbleMeGPT", class: "s-process-ai"}>
            %i.fa.fa-magic>
      = link_to edit_entry_path(entry), rel: "tooltip", title: "Edit Entry" do
        %i.fa.fa-pencil-square-o
    %h2
      - if current_page?(day_entry_path(year: entry.date.year, month: entry.date.month, day: entry.date.day))
        %span{rel: "tooltip-mobile-friendly", title: "#{tag_relative_date(entry.date, Date.in_time_zone(current_user.send_timezone).today)}"}
          = entry.date_format_short
      - else
        = link_to entry.date_format_short, day_entry_path(year: entry.date.year, month: entry.date.month, day: entry.date.day), rel: "tooltip-mobile-friendly", title: "#{tag_relative_date(entry.date, Date.in_time_zone(current_user.send_timezone).today)}"
    %h3
      %span
        = entry.date_day.upcase
        - if current_user.can_ai? && entry.sentiment.reject { |s| s == "unknown" }.any?
          %span{rel: "tooltip-mobile-friendly", title: "AI tagged as feeling #{entry.sentiment.to_sentence}", style: "padding: 0 0 0 5px; text-decoration: none;"}
            - entry.sentiment.each do |sentiment|
              = link_to Entry::AiTagger::EMOTIONS[sentiment], entries_emotion_path(sentiment), style: "text-decoration: none;"
.s-scrollable
  - if @search.present?
    = highlight(format_body(entry.formatted_body), @search.term)
  - else
    = format_body(entry.formatted_body)

  - if current_user.can_ai? && entry.ai_waiting_for_user_response
    %br
    %strong ðŸ‘¤ You:
    = form_tag respond_to_ai_path(entry), method: :put, class: "respond-to-gpt" do
      %textarea{rows: 1, class: "autogrow", style: "margin-top: 10px; width: 100%; padding: 5px 10px; border-radius: 8px; border: 2px solid #CCC;", name: "entry[ai_response]", placeholder: "Add your response here..."}
      %button{type: "submit", style: "font-size: 13px !important; margin-top: -15px;font-weight: bold; font-family: Raleway, sans-serif !important;", class: "btn btn-link btn-primary"} Reply to DabbleMeGPT
  - elsif current_user.can_ai? && (entry.ai_waiting_for_ai_response || params[:ai] == "generating")
    %hr{id: "generating-ai"}
    %div{data: { content: "dabblemegpt" }}
      %strong ðŸ¤– DabbleMeGPT:
      %br
      %p{style: "margin-top: 10px;"} Generating...
    :javascript
      setTimeout(function() { location.reload(); }, 4500);

  - if current_user.is_pro?
    = entry.spotify_embed
  - if current_user.is_pro? && (hashtags = entry.hashtags).present?
    %p.tags
      %strong.small Tags:
      - hashtags.each do |tag|
        - if (date = current_user.hashtags.select{|h| h.tag&.downcase == tag.downcase}.first&.date).present?
          = link_to search_url(host: ENV['MAIN_DOMAIN'], search: {term: "##{tag}"}), class: "noline", rel: "tooltip-mobile-friendly", title: "#{tag_relative_date(date, entry.date)}", style: "display: inline-block; margin-top: 8px;" do
            %span.label.label-default= tag
        - else
          = link_to search_url(host: ENV['MAIN_DOMAIN'], search: {term: "##{tag}"}), class: "noline", style: "display: inline-block; margin-top: 8px;" do
            %span.label.label-default= tag

- if entry.image_url_cdn.present?
  .pictureFrame
    =link_to entry.image_url_cdn, target: "_blank" do
      =image_code(entry)
    - if entry.image_url_cdn == "https://d10r8m94hrfowu.cloudfront.net/uploading.png"
      :javascript
        setTimeout(function() { location.reload(); }, 4500);      
.clearfix

:javascript
  $("#entry-#{entry.id}").imagesLoaded()
    .done( function( instance ) {
      $(instance.elements).find('.pictureFrame img').css("background-image","none");
    });
